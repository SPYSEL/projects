import telebot
from telebot import types
import time
import sqlite3
import asyncio


#chislitznam = '–ß–∏—Å–ª–∏—Ç–µ–ª—å' #–ò–ó–ú–ï–ù–ò–¢–¨ –≠–¢–£ –ü–ê–†–ê–®–£

bot = telebot.TeleBot('5654743331:AAGg14yIENs3F3c47AjCtNGcKcEF5wkakgM')

messageFromMe = ''

with sqlite3.connect('.\\Vedomost.db', check_same_thread=False) as db:
    cur = db.cursor()
    cur.execute(" CREATE TABLE IF NOT EXISTS Vedomost\
        (user_id INTEGER, one INTEGER, two INTEGER, three INTEGER,\
         four INTEGER, five INTEGER, six INTEGER, seven INTEGER,\
          eight INTEGER, nine INTEGER, ten INTEGER)")
    db.commit()

#############################–∫–Ω–æ–ø–∫–∏#############################
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup.add(types.KeyboardButton("–†–∞—Å—á–µ—Ç –≤–µ–¥–æ–º–æ—Å—Ç–∏"))
#markup.add(types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"))
markup.add(types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"))
#markup.add(types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"))
markup.add(types.KeyboardButton('–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º'))
################################################################

################################################################
###########################START################################
@bot.message_handler(commands=['start'])
def start(message):

    print("new session test")
    messageChatId = int(message.chat.id)
    print(f"user_id: {messageChatId}")

    with sqlite3.connect('.\\Vedomost.db') as db:
        cur = db.cursor()
        cur.execute("SELECT user_id FROM Vedomost WHERE user_id LIKE ?", (messageChatId,))
        check = cur.fetchone()
        if check == None:
            cur.execute("INSERT INTO Vedomost VALUES(?,?,?,?,?,?,?,?,?,?,?)",(messageChatId,0,0,0,0,0,0,0,0,0,0))
            print("create new user line\n")
        elif check != None:
            cur.execute("UPDATE Vedomost SET one=?, two=?, three=?, four=?, five=?, six=?, seven=?, eight=?, nine=?, ten=?, user_id=?\
             WHERE user_id = ?", (0,0,0,0,0,0,0,0,0,0, messageChatId, messageChatId,))
            print("edit old user line\n")
        else:
            print("–û—à–∏–±–∫–∞")
        db.commit()
    start = bot.send_message(message.chat.id, '–ï—Å–ª–∏ —è –≤–¥—Ä—É–≥ —Å–ª–æ–º–∞–ª—Å—è, –Ω–∞–∂–º–∏—Ç–µ: /start',reply_markup=markup)
    bot.register_next_step_handler(start, main)

    # –°–î–ï–õ–ê–¢–¨ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ CHAT_ID –í –ë–î

#–†–∞—Å–ø—Ä–µ–¥–∫–æ—Ä–æ–±–∫–∞
@bot.message_handler(content_types=['text'])
def main(message):

    if message.text == "–†–∞—Å—á–µ—Ç –≤–µ–¥–æ–º–æ—Å—Ç–∏":
        main1 = bot.send_message(message.chat.id, \
            '–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ç–µ—Å—Ç–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ.',reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(main1, vedomost)


    elif message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤':
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:')
        bot.send_photo(message.chat.id, 'https://imgur.com/a/HmkrVEK')

    elif message.text == '–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º':

        main2 = bot.send_message(message.chat.id, \
            '–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∂–µ–ª–∞–Ω–∏–µ–º, –∑–∞–º–µ—á–∞–Ω–∏–µ–º :)(–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç) ', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(main2, feedback)

    elif message.text == 'mes':

        main3 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        bot.register_next_step_handler(main3, messageForUser)

    elif message.text == "mesall":
        
        main4 = bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")
        bot.register_next_step_handler(main4, messageall)
    
    else:
        main5 = bot.send_message(message.chat.id, '–°–ª–µ–¥—É–π—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º!', reply_markup=markup)
        bot.register_next_step_handler(main5, main)

def messageall(message):
    if message.text != None:
        with sqlite3.connect('.\\Vedomost.db') as db:
            cur = db.cursor()
            cur.execute("SELECT user_id FROM Vedomost ")
            for userId in cur.execute("SELECT user_id FROM Vedomost "):
                print(f"select user: {userId[0]}")
                bot.send_message(userId[0], message.text)
        messageall1 = bot.send_message(message.chat.id, "—Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ!")
        bot.register_next_step_handler(messageall1, main)
    else:
        messageall2 = bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
        bot.register_next_step_handler(messageall2, main)


#–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def messageForUser(message):

    global messageFromMe
    messageFromMe = (message.text)
    forme = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    bot.register_next_step_handler(forme, messageForMe)


def messageForMe(message):

    global messageFromMe
    message = (message.text)
    bot.send_message(messageFromMe, ('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ' + message))
    bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ :)')

#–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
def feedback(message):

    bot.send_message(716599711, "user_id: " + str(message.chat.id)\
     + ' ' + "\nuser_name: "+ message.chat.username + '\nuser_message: ' + message.text)
    bot.send_message(1010471042, "user_id: " + str(message.chat.id)\
     + ' ' + "user_name: "+ message.chat.username + '\nuser_message: ' + message.text)
    feedback = bot.send_message(message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ üòä', reply_markup=markup)
    bot.register_next_step_handler(feedback, main)
#########################VEDOMOST#######################################

def vedomost(message):
    messageChatId = int(message.chat.id)

    if message.text == "0":
        vedomost1 = bot.send_message(message.chat.id, '–î–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ –Ω—É–ª—é')
        bot.register_next_step_handler(vedomost1, vedomost)

    elif message.text.isdigit():

        with sqlite3.connect('.\\Vedomost.db') as db:
            cur = db.cursor()
            cur.execute("UPDATE Vedomost SET one=? WHERE user_id = ?", (message.text, messageChatId,))
            db.commit()

        vedomost2 = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ.')
        bot.register_next_step_handler(vedomost2, nomber_two)

    elif message.text.isalpha():

        vedomost3 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(vedomost3, vedomost)
    else:
        vedomost4 = bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        bot.register_next_step_handler(vedomost4, main)


def nomber_two(message):
    messageChatId = int(message.chat.id)

    if message.text == "0":
        send = bot.send_message(message.chat.id, '–î–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ –Ω—É–ª—é')
        bot.register_next_step_handler(send, nomber_two)

    elif message.text.isdigit():

        with sqlite3.connect('.\\Vedomost.db') as db:
            cur = db.cursor()
            cur.execute("UPDATE Vedomost SET two=? WHERE user_id = ?", (message.text, messageChatId,))
            db.commit()

        number = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤–∫–ª—é—á–∞—è —Å—É–±–±–æ—Ç—É.')
        bot.register_next_step_handler(number, nomber_three)

    elif message.text.isalpha():

        number1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(number1, nomber_two)
    else:
        number2 = bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        bot.register_next_step_handler(number2, main)


def nomber_three(message):
    messageChatId = int(message.chat.id)

    if message.text == "0":
        three = bot.send_message(message.chat.id, '–î–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ –Ω—É–ª—é')
        bot.register_next_step_handler(three, nomber_three)
    elif message.text.isdigit():

        with sqlite3.connect('.\\Vedomost.db') as db:
            cur = db.cursor()
            cur.execute("UPDATE Vedomost SET three=? WHERE user_id = ?", (message.text, messageChatId,))
            db.commit()

        three1 = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤—Å–µ–≥–æ —á–∞—Å–æ–≤ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∑–∞–Ω—è—Ç–∏–π.')
        bot.register_next_step_handler(three1, nomber_four)

    elif message.text.isalpha():

        three2 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(three2, nomber_three)
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


def nomber_four(message):
    messageChatId = int(message.chat.id)

    if message.text.isdigit():

        with sqlite3.connect('.\\Vedomost.db') as db:
            cur = db.cursor()
            cur.execute("UPDATE Vedomost SET four=? WHERE user_id = ?", (message.text, messageChatId,))
            db.commit()

        four = bot.send_message(message.chat.id,'–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –±–µ–∑ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã.')
        bot.register_next_step_handler(four, nomber_five)

    elif message.text.isalpha():
        four1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(four1, nomber_four)

    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


def nomber_five(message):
    messageChatId = int(message.chat.id)

    if message.text.isdigit():

        with sqlite3.connect('.\\Vedomost.db') as db:
            cur = db.cursor()
            cur.execute("UPDATE Vedomost SET five=? WHERE user_id = ?", (message.text, messageChatId,))
            db.commit()

        five = bot.send_message(message.chat.id,'–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ç—ã—Ä–µ –∏ –ø—è—Ç—å.')
        bot.register_next_step_handler(five, otvet)

    elif message.text.isalpha():
        five1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(five1, nomber_five)

    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


def otvet(message):
    messageChatId = int(message.chat.id)

    if message.text.isdigit():
        with sqlite3.connect('.\\Vedomost.db') as db:
            cur = db.cursor()
            cur.execute("UPDATE Vedomost SET six=? WHERE user_id = ?", (message.text, messageChatId,))
            cur.execute("SELECT one, two, three, four, five, six FROM Vedomost WHERE user_id = ?", (messageChatId,))
            check = cur.fetchall()
            newcheck = list(check[0])

        db.commit()
        bot.send_message(message.chat.id, '–†–∞—Å—á–µ—Ç –≤–µ–¥–æ–º–æ—Å—Ç–∏...')

        a = round((newcheck[0] * 100) / newcheck[1], 2)
        newcheck.append(a)
        b = round((newcheck[1] * 6 * newcheck[2]), 2)
        newcheck.append(b)
        s = round(100 - ((newcheck[3] * 100) / newcheck[7]), 2)
        newcheck.append(s)
        d = round((newcheck[4] * 100) / newcheck[7], 2)
        newcheck.append(d)
        e = round((newcheck[5] * 100) / newcheck[1], 2)
        newcheck.append(e)


        bot.send_message(message.chat.id,\
         f"–ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å–≤–∞: {e}\n–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {s}\n–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—É–ª–æ–≤: {d}\n–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏: {a}\n–§–£–í: {b}")

        otvet = bot.send_message(message.chat.id,'–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?', reply_markup=markup)
        bot.register_next_step_handler(otvet, main)

    elif message.text.isalpha():
        otvet1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(otvet1, otvet)

    else:
        otvet2 = bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        bot.register_next_step_handler(otvet2, main)


################STARTING################
async def startpoling():

    try:
        print("started")
        bot.polling(non_stop=True)
    except Exception as exept:
        print("!!!crashed!!!")
        print(exept)
        sleep(15)
    finally:
        print("stopped")
        bot.stop_polling()


if __name__ == "__main__":
    asyncio.run(startpoling())
