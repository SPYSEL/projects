import telebot
from telebot import types
import sqlite3
import time
import asyncio

bot = telebot.TeleBot('TOKEN')

with sqlite3.connect('.\\testBotbd.db', check_same_thread=False) as db:
    cur = db.cursor()
    cur.execute(" CREATE TABLE IF NOT EXISTS testBotbd(user_id INTEGER, ca INTEGER, ct INTEGER,\
         cv INTEGER, vc INTEGER, te INTEGER,\
          ar INTEGER, yp INTEGER, uc INTEGER,\
           gd INTEGER, sc INTEGER, cs INTEGER,\
            ms INTEGER, cp INTEGER, cd INTEGER, mg INTEGER)")

#                             Кнопки
########################################################################
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup.add(types.KeyboardButton("Информация по специальностям колледжа"))
markup.add(types.KeyboardButton('Общая информация'))
markup.add(types.KeyboardButton('Информация о поступлении'))
markup.add(types.KeyboardButton('Контактные данные'))
markup.add(types.KeyboardButton('Тестирование на специальность'))
########################################################################
markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup1.add(types.KeyboardButton("Информация о специальностях"))
markup1.add(types.KeyboardButton("Вернуться назад"))
########################################################################
infopostup = types.ReplyKeyboardMarkup(resize_keyboard=True)
infopostup.add(types.KeyboardButton('9 классов очно'))
infopostup.add(types.KeyboardButton('11 классов очно'))
infopostup.add(types.KeyboardButton('Заочно'))
infopostup.add(types.KeyboardButton('Вернуться назад'))
########################################################################
budgetplat1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
budgetplat1.add(types.KeyboardButton('Бюджетная основа'))
budgetplat1.add(types.KeyboardButton('Платная основа'))
budgetplat1.add(types.KeyboardButton('Вернуться назад'))
########################################################################
budgetplat2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
budgetplat2.add(types.KeyboardButton('Поступление на базе 9 классов'))
budgetplat2.add(types.KeyboardButton('Список документов на поступление'))
budgetplat2.add(types.KeyboardButton('Информация по специальностям'))
budgetplat2.add(types.KeyboardButton('Стоимость обучения'))
budgetplat2.add(types.KeyboardButton('Вернуться назад'))
########################################################################
devklsss = types.ReplyKeyboardMarkup(resize_keyboard=True)
devklsss.add(types.KeyboardButton('Список документов при поступлении'))
devklsss.add(types.KeyboardButton('Ознакомиться со специальностями'))
devklsss.add(types.KeyboardButton('Стоимость обучения'))
devklsss.add(types.KeyboardButton('Вернуться назад'))
########################################################################
marka = types.ReplyKeyboardMarkup(resize_keyboard=True)
marka.add(types.KeyboardButton('Очная'))
marka.add(types.KeyboardButton('Заочное'))
marka.add(types.KeyboardButton('Переподготовка/Повышение квалификации'))
marka.add(types.KeyboardButton('Вернуться назад'))
########################################################################
markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup3.add('Cтруктура и органы управления образовательной организацией')
markup3.add('Организация образовательной деятельности')
markup3.add('Материально-техническое обеспечение и оснащённость образовательного процесса')
markup3.add('Стипендии и иные виды материальной поддержки')
markup3.add('Платные образовательные услуги')
markup3.add('Доступная среда')
markup3.add('Доступ к информационным системам и информационно-телекоммуникационным сетям')
markup3.add('Вернуться назад')
########################################################################
devklss = types.ReplyKeyboardMarkup(resize_keyboard=True)
devklss.add('Список документов при поступлении')
devklss.add('Ознакомиться со специальностями')
devklss.add('Вернуться назад')
########################################################################
markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup2.add(types.KeyboardButton('Узнать больше о специальностях'))
markup2.add(types.KeyboardButton('Вернуться к началу'))
########################################################################
budgetplat3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
budgetplat3.add('Вернуться назад')
##############################ТЕСТ######################################
firstquetion = types.ReplyKeyboardMarkup(resize_keyboard=True)
firstquetion.add(types.KeyboardButton('Математика'))
firstquetion.add(types.KeyboardButton('Информатика'))
firstquetion.add(types.KeyboardButton('Физика'))
firstquetion.add(types.KeyboardButton('Обществознание'))
firstquetion.add(types.KeyboardButton('История'))
firstquetion.add(types.KeyboardButton('Английский язык'))
firstquetion.add(types.KeyboardButton('Технология'))
firstquetion.add(types.KeyboardButton('Черчение'))
firstquetion.add(types.KeyboardButton('Русский язык'))
firstquetion.add(types.KeyboardButton('Вернуться назад'))
########################################################################
finaly = types.ReplyKeyboardMarkup(resize_keyboard=True)
finaly.add(types.KeyboardButton("Узнать результаты"))
finaly.add(types.KeyboardButton("Вернуться назад"))
########################################################################
besedio = types.ReplyKeyboardMarkup(resize_keyboard=True)
besedio.add(types.KeyboardButton("Компьютерных вирусах, проблемах настройки компьютеров"))
besedio.add(types.KeyboardButton("Автомобилям и ситуациях на дорогах"))
besedio.add(types.KeyboardButton("Туризме, достопримечательностях, путешествиях"))
besedio.add(types.KeyboardButton("Политике, законе"))
besedio.add(types.KeyboardButton("Применении новых технологий в быту"))
besedio.add(types.KeyboardButton("Развитии инфраструктуры города"))
besedio.add(types.KeyboardButton("Вернуться назад"))
########################################################################
vistavka = types.ReplyKeyboardMarkup(resize_keyboard=True)
vistavka.add(types.KeyboardButton("Научная выставка"))
vistavka.add(types.KeyboardButton("Выставка архитектуры"))
vistavka.add(types.KeyboardButton("Ярмарка и выставка услуг"))
vistavka.add(types.KeyboardButton("Выставка продукции производственного назначения"))
vistavka.add(types.KeyboardButton("Выставка дорожного хозяйства, техники"))
vistavka.add(types.KeyboardButton("Вернуться назад"))
########################################################################
chaildback = types.ReplyKeyboardMarkup(resize_keyboard=True)
chaildback.add(types.KeyboardButton("Играл(а) в компьютерные игры"))
chaildback.add(types.KeyboardButton("Играл(а) в конструктор"))
chaildback.add(types.KeyboardButton("Гулял(а) с друзьями"))
chaildback.add(types.KeyboardButton("Играл(а) в песочнице"))
chaildback.add(types.KeyboardButton("Играл(а) с железной дорогой, машинками"))
chaildback.add(types.KeyboardButton("Играл(а) с куклами, в дочки-матери"))
chaildback.add(types.KeyboardButton("Занимался(ась) творчеством"))
chaildback.add(types.KeyboardButton("Вернуться назад"))
########################################################################
likejob = types.ReplyKeyboardMarkup(resize_keyboard=True)
likejob.add(types.KeyboardButton("Чинить и настраивать компьютер"))
likejob.add(types.KeyboardButton("Ремонтировать и устанавливать электрические розетки и приборы"))
likejob.add(types.KeyboardButton("Заниматься творческой деятельностью, рукоделием"))
likejob.add(types.KeyboardButton("Находить новые знакомства, общаться, решать конфликтные ситуации"))
likejob.add(types.KeyboardButton("Помогать с благоустройством приусадебного участка"))
likejob.add(types.KeyboardButton("Помогать с ремонтом"))
likejob.add(types.KeyboardButton("Вернуться назад"))
########################################################################
prestige = types.ReplyKeyboardMarkup(resize_keyboard=True)
prestige.add(types.KeyboardButton("Саморазвитие"))
prestige.add(types.KeyboardButton("Комфорт и безопасность"))
prestige.add(types.KeyboardButton("Творчество"))
prestige.add(types.KeyboardButton("Помощь людям"))
prestige.add(types.KeyboardButton("Свобода и независимость"))
prestige.add(types.KeyboardButton("Вернуться назад"))
########################################################################
personal = types.ReplyKeyboardMarkup(resize_keyboard=True)
personal.add(types.KeyboardButton("Усидчивость"))
personal.add(types.KeyboardButton("Коммуникабельность"))
personal.add(types.KeyboardButton("Любознательность"))
personal.add(types.KeyboardButton("Энергичность"))
personal.add(types.KeyboardButton("Выносливость"))
personal.add(types.KeyboardButton("Мобильность"))
personal.add(types.KeyboardButton("Сосредоточенность"))
personal.add(types.KeyboardButton("Стрессоустойчивость"))
personal.add(types.KeyboardButton("Аккуратность"))
personal.add(types.KeyboardButton("Внимательность"))
personal.add(types.KeyboardButton("Вернуться назад"))
########################################################################
ysloviajob = types.ReplyKeyboardMarkup(resize_keyboard=True)
ysloviajob.add(types.KeyboardButton("Работать с клиентами"))
ysloviajob.add(types.KeyboardButton("Работать на открытом воздухе"))
ysloviajob.add(types.KeyboardButton("Работать одному"))
ysloviajob.add(types.KeyboardButton("Работать с высокотехнологичным оборудованием"))
ysloviajob.add(types.KeyboardButton("Работать в команде"))
ysloviajob.add(types.KeyboardButton("Работать в помещении"))
ysloviajob.add(types.KeyboardButton("Вернуться назад"))
################################################ИНФА#########################################################
pervoeotdel = ('1. Архитектура (базовый уровень)\n'
               '2. Водоснабжение и водоотведение (базовый уровень)\n'
               '3. Гостиничное дело (базовый уровень)\n'
               '4. Право и организация социального обеспечения (базовый уровень)\n'
               '5. Сварочное производство (базовый уровень)\n'
               '6. Сетевое и системное администрирование (базовый уровень)\n'
               '7. Строительство и эксплуатация инженерных сооружений(базовый уровень)\n'
               '8. Теплоснабжение и теплотехническое оборудование(базовый уровень)')
vtoroeotdel = ('9. Монтаж и эксплуатация оборудования систем газоснабжения (базовый уровень)\n'
               '10. Монтаж, наладка и эксплуатация электрооборудования промышленных и гражданских зданий (базовый уровень)\n'
               '11. Строительство и эксплуатация автомобильных дорог и аэродромов (базовый уровень)\n'
               '12. Строительство и эксплуатация городских путей сообщения (базовый уровень)\n'
               '13. Строительство и эксплуатация зданий и сооружений (базовый уровень)\n'
               '14. Управление, эксплуатация и обслуживание многоквартирного дома (базовый уровень)\n'
               '15. Электроснабжение (по отраслям) (базовый уровень)')
zaochnaya = ('1. Водоснабжение и водоотведение (базовый уровень)\n'
             '2. Монтаж и эксплуатация оборудования систем газоснабжения (базовый уровень)\n'
             '3. Монтаж, наладка и эксплуатация электрооборудования промышленных и гражданских зданий (базовый уровень)\n'
             '4. Право и организация социального обеспечения(базовый уровень)\n'
             '5. Строительство и эксплуатация автомобильных дорог и аэродромов (базовый уровень)\n'
             '6. Строительство и эксплуатация городских путей сообщения (базовый уровень)\n'
             '7. Строительство и эксплуатация зданий и сооружений(базовый уровень)\n'
             '8. Строительство и эксплуатация инженерных сооружений(базовый уровень)\n'
             '9. Теплоснабжение и теплотехническое оборудование(базовый уровень)\n'
             '10. Компьютерные системы и комплексы (базовый уровень)\n'
             '11. Электроснабжение (по отраслям) (базовый уровень)')
perepodgotovka = ('1. Бетонщик (базовый уровень)\n'
                  '2. Вальщик леса\n'
                  '3. Горничная (базовый уровень)\n'
                  '4. Каменщик\n'
                  '5. Кровельщик по рулонным кровлям и по кровлям из штучных материалов \n'
                  '6. Маляр\n'
                  '7. Монтажник санитарно технических систем и оборудования\n'
                  '8. Облицовщик-плиточник\n'
                  '9. Оператор ЭВМ (по программе «1С бухгалтерия; графические редакторы: фотошоп, корел, архикад)\n'
                  '10. Плотник\n'
                  '11. Слесарь-сантехник\n'
                  '12. Слесарь строительный\n'
                  '13. Станочник деревообрабатывающих станков\n'
                  '14. Столяр\n'
                  '15. Штукатур\n'
                  '16. Сварщик дуговой сварки неплавящимся электродом в защитном газе\n'
                  '17. Сварщик ручной дуговой сварки плавящимся покрытым электродом\n'
                  '18. Электромонтер по испытаниям и измерениям\n'
                  '19. Электромонтер по обслуживанию электроустановок\n'
                  '20. Электромонтер по ремонту и обслуживанию электрооборудования\n'
                  '21. Электромонтер по эксплуатации распределительных сетей\n')
spisokdoks = ('Поступающим в колледж необходимо представить в приёмную комиссию следующие документы:\n'
              '1. Заявление на имя директора\n'
              '2. Документ об образовании\n'
              '3. Фотографии 3х4 (4шт.)\n'
              '4. Документ, удостоверяющий личность')


################################################СТАРТ#########################################################
@bot.message_handler(commands=['start'])
def start(message):
    send = bot.send_message(message.chat.id, "Привет, это телеграм бот колледжа АКС ЖКХ,\
 двигайся по кнопкам которые всплывают снизу", reply_markup=markup)
    bot.register_next_step_handler(send, otdelenie)


@bot.message_handler(content_types=['text'])
def otdelenie(message):
    if message.text == 'Информация по специальностям колледжа':

        sendotd = bot.send_message(message.chat.id, 'Выберете то что хотите узнать:', reply_markup=marka)
        bot.register_next_step_handler(sendotd, formy)

    elif message.text == 'Общая информация':

        sendotd1 = bot.send_message(message.chat.id, 'Что хотите узнать?', reply_markup=markup3)
        bot.register_next_step_handler(sendotd1, obinf)

    elif message.text == 'Контактные данные':

        bot.send_message(message.chat.id,
                         'Юридический адрес: ул. Красноармейская 157, г.Благовещенск, Амурская область, 675011.\n'
                         'Телефоны: Учебная часть: 8(4162)77-30-06, Зам. директора по УР: 8(4162)77-30-01,\n'
                         'Главный бухгалтер: 8(4162)77-30-20\n'
                         'Администратор учебной части: Киселева Надежда Юрьевна\n'
                         'Адреса электронной почты: bkst2006@rambler.ru (общий)')


    elif message.text == 'Информация о поступлении':

        sendotd2 = bot.send_message(message.chat.id, 'Нажмите на то что хотите узнать', reply_markup=infopostup)
        bot.register_next_step_handler(sendotd2, infopostuplenii)

    elif message.text == 'Тестирование на специальность':

        print("new session test")
        messageChatId = int(message.chat.id)
        print(f"user_id: {messageChatId}")

        with sqlite3.connect('.\\testBotbd.db') as db:
            cur = db.cursor()
            cur.execute("SELECT user_id FROM testBotbd WHERE user_id LIKE ?", (messageChatId,))
            check = cur.fetchone()
            if check == None:
                cur.execute("INSERT INTO testBotbd VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", \
                            (messageChatId, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
                print("create new user line\n")
            elif check != None:
                cur.execute("UPDATE testBotbd\
                 SET ca=?, ct=?, cv=?, vc=?, te=?, ar=?, yp=?, uc=?, gd=?, sc=?, cs=?, ms=?, cp=?, cd=?, mg=?, user_id=?\
                  WHERE user_id = ?", (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId, messageChatId,))
                print("edit old user line\n")
            else:
                print("Ошибка")
            db.commit()
        sendotd3 = bot.send_message(message.chat.id, 'Выбрано ноль из трех\nКакие предметы в школе вам давались легче всего?',
                                    reply_markup=firstquetion)
        bot.register_next_step_handler(sendotd3, testing1_1)
    else:
        bot.send_message(message.chat.id, 'Ошибка, двигайтесь по кнопкам', reply_markup=markup)


def infopostuplenii(message):
    if message.text == '9 классов очно':
        sendinf = bot.send_message(message.chat.id, 'Выберите основу о которой хотите узнать.',
                                   reply_markup=budgetplat1)
        bot.register_next_step_handler(sendinf, devyatklassov)

    elif message.text == '11 классов очно':
        sendinf1 = bot.send_message(message.chat.id, 'Выберите то, с чем хотите ознакомится.', reply_markup=budgetplat2)
        bot.register_next_step_handler(sendinf1, odinatsyatklassov)

    elif message.text == 'Заочно':
        sendinf2 = bot.send_message(message.chat.id, 'Информация о поступлении заочно:{данные будут актуализированы}',
                                    reply_markup=budgetplat3)
        bot.register_next_step_handler(sendinf2, infopostuplenii)

    elif message.text == 'Вернуться назад':
        sendinf3 = bot.send_message(message.chat.id, 'Вы вернулись назад.', reply_markup=markup)
        bot.register_next_step_handler(sendinf3, otdelenie)

    else:
        bot.send_message(message.chat.id, 'Ошибка, двигайтесь по кнопкам', reply_markup=markup)


def devyatklassov(message):
    if message.text == 'Бюджетная основа':
        senddev = bot.send_message(message.chat.id, 'Выберите то, с чем хотите ознакомится.', reply_markup=devklss)
        bot.register_next_step_handler(senddev, devklasspodpunktB)

    elif message.text == 'Платная основа':
        senddev1 = bot.send_message(message.chat.id, 'Выберите то, с чем хотите ознакомится.', reply_markup=devklsss)
        bot.register_next_step_handler(senddev1, devklasspodpunktP)

    elif message.text == 'Вернуться назад':
        senddev2 = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=infopostup)
        bot.register_next_step_handler(senddev2, infopostuplenii)

    else:
        bot.send_message(message.chat.id, 'Ошибка, двигайтесь по кнопкам', reply_markup=markup)


def devklasspodpunktB(message):
    if message.text == 'Список документов при поступлении':
        senddekl = bot.send_message(message.chat.id, spisokdoks)
        bot.register_next_step_handler(senddekl, devklasspodpunktB)

    elif message.text == 'Ознакомиться со специальностями':
        bot.send_message(message.chat.id, 'Специальности первого отделения:')
        bot.send_message(message.chat.id, pervoeotdel)
        bot.send_message(message.chat.id, 'Специальности второго отедления:')
        bot.send_message(message.chat.id, vtoroeotdel)
        senddekl1 = bot.send_message(message.chat.id, 'Введите цифру специальности о которой хотите узнать:',
                                     reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(senddekl1, informforspec1)

    elif message.text == 'Вернуться назад':
        senddekl2 = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=budgetplat1)
        bot.register_next_step_handler(senddekl2, devyatklassov)

    else:
        bot.send_message(message.chat.id, 'Ошибка, двигайтесь по кнопкам', reply_markup=markup)


def devklasspodpunktP(message):
    if message.text == 'Список документов при поступлении':
        senddeklb = bot.send_message(message.chat.id, spisokdoks)
        bot.register_next_step_handler(senddeklb, devklasspodpunktP)

    elif message.text == 'Ознакомиться со специальностями':
        bot.send_message(message.chat.id, 'Специальности первого отделения:')
        bot.send_message(message.chat.id, pervoeotdel)
        bot.send_message(message.chat.id, 'Специальности второго отедления:')
        bot.send_message(message.chat.id, vtoroeotdel)
        senddeklb1 = bot.send_message(message.chat.id, 'Введите цифру специальности о которой хотите узнать:',
                                      reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(senddeklb1, informforspec1)

    elif message.text == 'Стоимость обучения':
        senddeklb2 = bot.send_message(message.chat.id,
                                      'Стоимость обучения на базе поступления: {Данные будут актуализированы}')
        bot.register_next_step_handler(senddeklb2, devklasspodpunktP)
    elif message.text == 'Вернуться назад':
        senddeklb3 = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=budgetplat1)
        bot.register_next_step_handler(senddeklb3, devyatklassov)

    else:
        bot.send_message(message.chat.id, 'Ошибка, двигайтесь по кнопкам', reply_markup=markup)


def odinatsyatklassov(message):
    if message.text == 'Поступление на базе 9 классов':
        bot.send_message(message.chat.id,
                         'Если Вы закончили 11 классов, вы можете поступить на базе 9 классов на бюджетную основу.')

    elif message.text == 'Список документов на поступление':
        sendodi = bot.send_message(message.chat.id, spisokdoks)
        bot.register_next_step_handler(sendodi, odinatsyatklassov)

    elif message.text == 'Информация по специальностям':
        bot.send_message(message.chat.id, 'Специальности первого отделения:')
        bot.send_message(message.chat.id, pervoeotdel)
        bot.send_message(message.chat.id, 'Специальности второго отедления:')
        bot.send_message(message.chat.id, vtoroeotdel)
        sendodi1 = bot.send_message(message.chat.id, 'Введите цифру специальности о которой хотите узнать:',
                                    reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(sendodi1, informforspec1)

    elif message.text == 'Стоимость обучения':
        bot.send_message(message.chat.id, 'Стоимость обучения на базе поступления: {Данные будут актуализированы}')

    elif message.text == 'Вернуться назад':
        sendodi2 = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=infopostup)
        bot.register_next_step_handler(sendodi2, infopostuplenii)

    else:
        bot.send_message(message.chat.id, 'Ошибка, двигайтесь по кнопкам', reply_markup=markup)


def obinf(message):
    if message.text == 'Cтруктура и органы управления образовательной организацией':
        bot.send_message(message.chat.id,
                         'Государственное профессиональное образовательное автономное учреждение Амурской области "Амурский колледж строительства и жилищно-коммунального хозяйства"состоит из двух отделений:\n\n'
                         'Очное отделение колледжа: 1 отделение колледжа распложено по адресу ул. Красноармейская, 157 (E-mail: dvgkgb@rambler.ru, akszhkh@rambler.ru)\n\n'
                         'Директор колледжа: Тарлаков Евгений Александрович.\n\n'
                         'Заместитель директора по учебной работе: Ленских Светлана Александровна.\n\n'
                         'Заместитель директора по воспитательной работе: Васильев Сергей Николаевич.\n\n'
                         'Заместитель директора по управлению имущественным комплексом : Диденко Артем Михайлович.\n\n'
                         'Заместитель директора по научно-методической работе: Тищенко Оксана Александровна.\n\n'
                         'Возглавляет заведующий 1-м отделением Савельева Мария Сергеевна (кабинет 212К, телефон 77-30-09).\n\n'
                         'На 1 отделении действуют две кафедры: Кафедра технических дисциплин, Кафедра общеобразовательных дисциплин.\n\n'
                         '2 отделение колледжа распложено по адресу ул. Амурская, 97\n\n'
                         'Возглавляет заведующий 2-м отделением колледжа: Юровских Елена Анатольевна.\n\n'
                         'Старший воспитатель: Зайчик Анатолий Леонидович. e-mail: ask_admin@mail.ru телефон: +7 (416) 477-30-10\n\n'
                         'На 2 отделении действуют две кафедры: кафедра технических дисциплин, кафедра гуманитарных дисциплин.\n\n'
                         'Заочное отделение и дополнительного профессионального образования колледжа: Расположено по адресу ул. Красноармейская, 157, кабинет 102а. Телефон: +7 (914) 550-69-60\n\n'
                         'Заведующий ЗО и ДПО колледжа: Харченкова Елена Владимировна. Отделение ЗО и ДПО является структурным подразделением колледжа.\n\n'
                         'Органы управления образовательной организации: Административный совет, Студенческий совет, Педагогический совет, Совет по профилактике правонарушений и пропоганде здорового образа жизни, Наблюдательный совет, Общее собрание коллектива.',
                         reply_markup=markup)

    elif message.text == 'Организация образовательной деятельности':
        bot.send_message(message.chat.id,
                         'При реализации образовательной деятельности применяется электронное обучение и дистанционные образовательные технологии\n\n'
                         'Среднее профессиональное образование может быть получено в колледже, а также вне его.\nФормы получения образования и формы обучения по образовательным программам среднего профессионального образования определяются соответствующими федеральными государственными образовательными стандартами.\n\n'
                         'Федеральными государственными образовательными стандартами устанавливаются сроки получения среднего профессионального образования с учетом различных форм обучения, образовательных технологий и особенностей отдельных категорий обучающихся.\n\n'
                         'Содержание среднего профессионального образования по каждой профессии, специальности определяется образовательными программами среднего профессионального образования. Содержание среднего профессионального образования должно обеспечивать получение квалификации.\n\n'
                         'Требования к структуре, объему, условиям реализации и результатам освоения образовательных программам среднего профессионального образования определяются соответствующими федеральными государственными образовательными стандартами.\n\n')
        bot.send_message(message.chat.id,
                         'Образовательные программы среднего профессионального образования самостоятельно разрабатываются и утверждаются колледжем. Колледж, по имеющим государственную аккредитацию образовательным программам среднего профессионального образования, разрабатывают указанные образовательные программы в соответствии с федеральными государственными образовательными стандартами по соответствующим профессиям, специальностям среднего профессионального образования и с учетом соответствующих примерных основных образовательных программ.\n\n'
                         'Образовательная программа среднего профессионального образования включает в себя учебный план, календарный учебный график, рабочие программы учебных предметов, курсов, дисциплин (модулей), оценочные и методические материалы, а также иные компоненты, обеспечивающие воспитание и обучение обучающихся.\n\n'
                         'Учебный план образовательной программы среднего профессионального образования определяет перечень, трудоемкость, последовательность и распределение по периодам обучения учебных предметов, курсов, дисциплин (модулей), практики, иных видов учебной деятельности обучающихся и формы их промежуточной аттестации.\n\n'
                         'В колледже образовательная деятельность осуществляется на государственном языке Российской Федерации.\nОбразовательная деятельность по образовательным программам среднего профессионального образования организуется в соответствии с утвержденными образовательной организацией учебными планами, календарными учебными графиками, в соответствии с которыми колледжем составляются расписания учебных занятий по каждой профессии, специальности среднего профессионального образования.\n\n'
                         'К освоению образовательных программ среднего профессионального образования допускаются лица, имеющие образование не ниже основного общего или среднего общего образования, за исключением образовательных программ среднего профессионального образования, интегрированных с образовательными программами основного общего и среднего общего образования.\n\n'
                         'К освоению образовательных программ среднего профессионального образования, интегрированных с образовательными программами основного общего и среднего общего образования, допускаются лица, имеющие начальное общее образование.\n\n'
                         'Получение среднего профессионального образования на базе основного общего образования осуществляется с одновременным получением обучающимися среднего общего образования в пределах соответствующей образовательной программы среднего профессионального образования.\n\n'
                         'Учебный год в колледже начинается 1 сентября и заканчивается в соответствии с учебным планом соответствующей образовательной программы.\n\n'
                         'Учебная деятельность обучающихся предусматривает учебные занятия (урок, практическое занятие, лабораторное занятие, консультация, лекция, семинар), самостоятельную работу, выполнение курсового проекта (работы) (при освоении программ подготовки специалистов среднего звена), практику, а также другие виды учебной деятельности, определенные учебным планом.\n\n'
                         'Для всех видов аудиторных занятий академический час устанавливается продолжительностью 45 минут. Объем обязательных аудиторных занятий и практики не должен превышать 36 академических часов в неделю.',
                         reply_markup=markup)

    elif message.text == 'Материально-техническое обеспечение и оснащённость образовательного процесса':
        bot.send_message(message.chat.id,
                         'Для организации учебного процесса колледж располагает достаточной материально – технической базой. Общая площадь строений составляет 26 056 кв.м.:\n\n'
                         'Колледж имеет 69 учебных кабинета, 9 лабораторий, 9 компьютерных кабинета, учебные мастерские, 3 спортивных зала, тренажерный и теннисный залы, 2 буфета, медицинский пункт, 2 библиотеки с читальными залами по 32 места, 7 компьютеров в выходом в сеть Интернет и общим количеством экземпляров литературы 57 714, 2 актовых зала на 120 и 250 мест, информационно-методический кабинет и 2 общежития на 360 и 610 мест.\n\n'
                         'Доступ в здания образовательной организации инвалидов и лиц с ограниченными возможностями здоровья оборудован сигнальными кнопками\n\n'
                         'Для занятий физической культурой и спортом оборудованы спортивные залы, тренажерный и теннисный зал.\n\n'
                         'Локальные компьютерные сети действуют в каждом компьютерном классе и в колледже в целом. Выход в Интернет возможен со всех компьютеров учебных аудиторий. В компьютерных кабинетах имеется необходимое техническое и лицензионное программное обеспечение. Контроль доступа к ресурсам сети Интернет осуществляется преподавателем на шлюзе аудитории.\n\n'
                         'Учебный процесс обеспечен кабинетами и лабораториями, перечень которых соответствует ФГОС СПО. Кабинеты и лаборатории в соответствии с программами учебных дисциплин оснащены необходимым оборудованием, учебно-наглядными пособиями, техническими средствами обучения, способствующей качественной подготовке специалистов.\n\n'
                         'Ежегодно приказом директора назначаются заведующие кабинетами и лабораториями, они осуществляют контроль за состоянием оборудования и аудиторных фондов и обеспечивают их эффективное использование.Оборудованные учебные кабинеты, объекты для проведения практических занятий, библиотека, объекты спорта, средства обучения и воспитания, приспособленных для использования инвалидами и лицами с ограниченными возможностями здоровья, будут приобретены. в случае необходимости, так как их заблаговременное приобретение влечет их моральное и техническое устарение.\n\n')
        bot.send_message(message.chat.id,
                         'Материально-техническая база колледжа имеет учебные мастерские: столярная мастерская, слесарная мастерская, сварочный участок, учебная гостиница и учебная бухгалтерия, учебный полигон каменной кладки и облицовочной плитки.\n\n'
                         'Здания учебных корпусов и общежития оборудованы пожарной сигнализацией и системой видеонаблюдения. Строительные, санитарные и гигиенические нормы колледжа выполняются, уровень обеспечения охраны здоровья студентов и сотрудников соответствует установленным требованиям.\n\n'
                         'Материально-техническая база совершенствуется: ведется непрерывная работа по переоснащению кабинетов и лабораторий, приобретаются компьютеры, оргтехника, наглядные пособия, мебель, проводятся ремонтные работы.\n\n'
                         'В рамках реализации информационно-коммуникационных технологий в колледже применяются различные программные комплексы (только лицензионные и свободно распространяемые программы и ОС): 1C: Предприятие 8; AutoCAD 2011; AutoCAD MEP 2011; AutoCAD Arhitecture 2011; AutoCAD Civil 3D 2011; Autodesk Vault 2011 for AutoCAD Civil 3D; Autodesk Revit Arhitecture 2011; Autodesk Revit MEP Suit 2011; AutoCAD Invertor Professional 2011 (AutoCAD Mechanical 2011); Autoidesk 3ds Max Design 2011; CorelDRAW Graphics Suite X5; ArhiCAD 14; Правовая система КонсультантПлюс и «Кодекс»; Adobe Photoshop CS5; Gilar.\n\n'
                         'Материально-техническое обеспечение учебного процесса:\n    '
                         '- компьютеры – 264 шт.\n    '
                         '- принтеры – 52 шт.\n    '
                         '- сканеры – 8 шт.\n    '
                         '- мультимедийные проекторы – 32 шт.\n    '
                         '- Интерактивная доска – 3 шт.\n    '
                         '- плоттер – 2 шт.\n    '
                         '- многофункциональные устройства (МФУ, выполняющие операции печати, сканирования, копирования) – 20 шт.\n\n'
                         'В колледже имеется достаточное количество источников учебной информации по всем дисциплинам учебных планов по специальностям учебного заведения.\n\n'
                         'Имеются периодические издания: «Архитектура, строительство и дизайн», «Архитектура и строительство», «Архитектура и строительство Дальнего Востока», «Бухгалтерский учет», «Вестник образования РФ», «Вестник строительного комплекса», «Гостиница и ресторан», «Линукс», «Лучшие интерьеры», «Отель», «Теплоэнергетика», «Технологии строительства», «Экономика строительства», «Специалист» и др.\n\n'
                         'Газеты: «Строительная газета», «Российская газета», методические журналы «Среднее профессиональное образование», «Специалист», «Методист», «Официальные документы в образовании» др.\n\n'
                         'Обеспеченность учебной литературой на 1 студента составляет 17 экз. по специальным дисциплинам 11 экз. по общепрофессиональным и 2 - по общеобразовательным, гуманитарным и социально-экономическим дисциплинам. Обеспеченность 1 студента учебной литературой по блоку математических и естественнонаучных дисциплин составляет 0,3 экземпляров.\n\n'
                         'В колледже имеются 2 читальных зала: I отделение на 32 посадочных мест, функционирует электронная библиотека с выходом в Интернет на 4 посадочных места; II отделение на 32 посадочных мест, функционирует электронная библиотека с выходом в Интернет на 3 посадочных места.\n\n')
        bot.send_message(message.chat.id,
                         'В библиотеке имеются электронные версии: 150 учебников и методических пособий. Работниками библиотеки ведётся работа по электронному книгообеспечению обучающихся. Доступ к электронной библиотеке осуществляется через личный кабинет обучающегося на сайте колледжа www.bkst.ru, также имеется версия для слабовидящих\n\n'
                         'Девять компьютерных классов объединены в локальные сети с выходом в Интернет. Контроль доступа к ресурсам сети Интернет осуществляется контент-фильтром SkyDNS и преподавателем на шлюзе аудитории.\n\n'
                         'Назначение стипендии студентам осуществляется на основании «Порядка назначения стипендии студентам государственных профессиональных образовательных организаций области», утвержденного постановлением Правительства Амурской области от 05.06.2014 № 345, и постановления Правительства Амурской области «О внесении изменений в постановление Правительства Амурской области от 05.06.2014 № 345» от 28.11.2014 № 711за счет регионального бюджетного финансирования.\n\n'
                         'Иногородние обучающиеся по всем направлениям подготовки проживают в общежитиях колледжа. Для досуга обучающихся организована работа творческих и спортивных секций.\n\n'
                         'Так же на отделениях колледжа имеются медицинские пункты состоящие из кабинета врача и процедурного кабинета. В общежитии колледжа отведена целая секция под изолятор временного содержания, состоящая из 6 комнат. Комнаты оборудованы всем необходимым для временного проживания (кровать, тумба, шкаф, телевизор). Так же в комнатах имеется аптечка, лампа для кварцевания, градусник. В секции оборудованы: туалетная комната; душевая комната; кухня, в которой имеются плиты, холодильник, мойка, посуда.\n\n'
                         'Медицинское обслуживание совершеннолетних студентов производится на базе Поликлиники № 4, по адресу Театральная 28, несовершеннолетних студентов: 1-отделение – поликлиника № 3 (Ленина 54), 2-е отделение - поликлиника №2 ( Зейская 72)\n\n'
                         'В колледже имеются два буфета, действующих на основании договора аренды областного недвижимого имущества № 44 от 26.06.2017 г. и договора аренды областного недвижимого имущества № 57А от 12.09.2017 года, расположенные в главным корпусах 1-го и 2-го отделения, которые оснащены всем необходимым для обеспечения горячего питания обучающихся. (холодильники, микроволновые печи, куллер, потер, мебель ). Буфеты работают с 9.00 до 15.30\n\n',
                         reply_markup=markup)

    elif message.text == 'Стипендии и иные виды материальной поддержки':
        bot.send_message(message.chat.id,
                         'Полное государственное обеспечение одеждой, обувью, жестким и мягким инвентарем. Детей-сирот, детей, оставшихся без попечения родителей, и лиц из их числа в порядке, установленном федеральными законами, законами Амурской области;\n\n'
                         'Получение стипендий, материальной помощи и других денежных выплат, предусмотренных законодательством об образовании.\n\n'
                         'Колледж предоставляет каждому нуждающемуся в жилой площади обучающемуся по основным образовательным программам среднего профессионального образования жилое помещение в общежитии. С каждым обучающимся, проживающем в общежитии, заключается договор найма жилого помещения в порядке, установленном жилищным законодательством и Положением о специализированном жилищном фонде (общежитиях) колледжа.\n\n'
                         'Плата за общежитие формируется из расчета занимаемой площади на 1 койко/место – 6 кв.м, включая: электроснабжение, холодную воду используемую на нужды горячего и холодного водоснабжения, тепловую энергию используемую на нужды горячего водоснабжения, водоотведение, теплоснабжение, в соответствии с приказом № 167-од от 09.08.2017 года и утверждается директором колледжа.\n\n',
                         reply_markup=markup)

    elif message.text == 'Платные образовательные услуги':
        bot.send_message(message.chat.id,
                         'К платным образовательным услугам, предоставляемым колледжем относятся: обучение по дополнительным образовательным программам, преподавание специальных курсов, подготовка и переподготовка работников квалифицированного труда (рабочих и служащих) и специалистов соответствующего уровня образования, осуществляемые сверх финансируемых за счет средств соответствующих бюджетов заданий (контрольных цифр) по приему обучающихся и другие услуги.\n\n'
                         'Процесс оказания платных услуг оформляется приказами по колледжу. В обязательном порядке издаются приказы о зачислении, выпуске, отчислении или переводе, стоимости платных образовательных услуг на учебный год.\n\n'
                         'Прием на места с оплатой стоимости обучения на каждую специальность осуществляется приемной комиссией сверх установленных на них контрольных цифр приема.\n\n'
                         'Взаимоотношения между колледжем, с одной стороны, и юридическим или физическим лицом, с другой стороны, для приема на места с оплатой стоимости обучения регулируются договором. Договор оформляется при подаче заявлений и документов на места с оплатой стоимости обучения.\n\n'
                         'Стоимость оказания платных образовательных услуг утверждается приказом директора колледжа на учебный год, в соответствии со сметой расходов на обучение.\n\n',
                         reply_markup=markup)

    elif message.text == 'Доступная среда':
        bot.send_message(message.chat.id,
                         'Под специальными условиями среднего профессионального образования обучающимися с ограниченными возможностями здоровья понимаются условия обучения, воспитания и развития таких обучающихся, включающие в себя использование и методов обучения и воспитания, специальных учебников, учебных пособий и дидактических материалов, специальных технических средств обучения коллективного и индивидуального пользования, предоставление услуг ассистента(помощника), оказывающего обучающимся необходимую техническую помощь, проведение групповых и индивидуальных коррекционных занятий , обеспечение доступа в здание колледжа и другие условия, без которых невозможно или затруднено освоение образовательных программ обучающимися с ограниченными возможностями здоровья.\n\n'
                         'В целях доступности получения среднего профессионального образования обучающимися с ограниченными возможностями здоровья колледжем обеспечивается: Для студентов с ОВЗ предусматривается применение видео¬техники, мультимедийной техники и других средств передачи информации в доступных формах.\n\n'
                         ' • Для студентов с нарушениями опорно-двигательной функции предусматривается применение специального программного обеспечения, в том числе, специальные возможности операционных систем, таких, как экранная клавиатура, и альтернативные устройства ввода информации.\n\n'
                         ' • Адаптация официального сайта колледжа в сети Интернет с учетом особых потребностей инвалидов по зрению;\n\n'
                         ' • Размещение в доступных местах для обучающихся в адаптированной форме справочной информации о расписании занятий (по необходимости);\n\n'
                         ' • Обеспечение выпуска альтернативных форматов печатных материалов (по необходимости);\n\n'
                         ' • Обеспечение доступа обучающегося, являющегося слепым и использующего собаку-поводыря, к зданию колледжа (по необходимости).\n\n'
                         ' • Визуальная информация о расписании учебных занятий;\n\n'
                         ' • Обеспечение надлежащими звуковыми средствами воспроизведения информации (по необходимости).\n\n'
                         ' • Доступ в здания образовательной организации инвалидов и лиц с ограниченными возможностями здоровья осуществляется при помощи кнопки вызова, расположенной на фасаде здания.\n\n'
                         ' • Образование обучающихся с ограниченными возможностями здоровья может быть организовано как совместно с другими обучающимися, так и в отдельном кабинете, группе.\n\n'
                         ' • Библиотека колледжа подключена к электронно-библиотечной системе IRBIS.\n\n'
                         ' • Специальные учебники, учебные пособия, иная учебная литература, услуги сурдопереводчика предоставляются лица с ограниченными возможностями здоровья бесплатно(по необходимости). С учетом особых потребностей обучающихся колледжем обеспечивается предоставление учебных, лекционных материалов в электронном виде.\n\n'
                         ' • Осуществляется дистанционное обучение.\n\n', reply_markup=markup)

    elif message.text == 'Доступ к информационным системам и информационно-телекоммуникационным сетям':
        bot.send_message(message.chat.id,
                         'Все компьютеры ГПОАУ АКСЖКХ объеденены в единую локальную вычислительную сеть с доступом в интернет. Фильтрация трафика от нежелательных контентов осуществляется при помощи Dr.Web Desktop Security Suite Комплексная защита + Подключаемые модули firewall, Офисный контроль.\n\n'
                         'Провайдером образовательного учреждения является ООО "Теледайм систем лимитед". Имеется три канала подключения к интернет: 2 выделенных канала пропускной способностью подключения в 4 Мб/с для общего пользования на каждом отделении и один выделенный канал в 500 Кб/с для подключения к базам данных ФИС ЕГ. Имеются три точки WiFi в главном корпусе колледжа и покрывают 10% площади аудиторий к общей площади.\n\n'
                         'Для обеспечения образовательного процесса в учреждении используется современное лицензионное программное обеспечение, такое как, AutoCAD, 3D Max, ArhiCAD, Photoshop, 1C – бухгалтерия (v.8), Консультант+, Кодекс, Гарант, CorelDRAW и пр.\n\n'
                         'Для обеспечения осуществления финансово-хозяйственной деятельностью учреждения внедрено передовое программное обеспечение – 1с-бухгалтерия (v. 8), электронный документооборот, справочно-информационная система "Кодекс" и пр.\n\n'
                         'Кроме того, создана СУБД - единая база данных (Firebird) и приложения для управления ею, что позволило значительно увеличить эффективность управлением образовательного учреждения. Данная система позволила автоматизировать процесс управления кадрами и учебно-образовательным процессом:\n'
                         ' • система тестирования: позваляет создавать тесты преподавателями и осуществление тестирования учащихся, как в стенах учебного учреждения, так и дистанционно;\n'
                         ' • система электронной зачетки: отображается на сайте учебного учреждения и позволяет автоматизировать процесс распечатки дипломов и приложений к ним;\n'
                         ' • система текущей успеваемости: позволяет вести учет текущей успеваемости студентов с возможностью контроля учащихся родителями через интернет;\n'
                         ' • система составления расписания: позволяет упростить процедуру составления последнего и отображает его на сайте учреждения;\n'
                         ' • система электронной библиотеки: через личный кабинет учащихся и преподавателей, предоставляет доступ к электронным учебникам и литературе по предметам.\n\n'
                         'СУБД позволят генерировать отчеты практически любой сложности, что также упрощает жизнь администрации учреждения.\n\n'
                         'Все сервера, а это web-сервер, сервер баз данных, файловый сервер, интернет шлюз и пр., размещены на площадке образовательного учреждения',
                         reply_markup=markup)

    elif message.text == 'Вернуться назад':
        sendodin = bot.send_message(message.chat.id, 'Вы вернулись назад.', reply_markup=markup)
        bot.register_next_step_handler(sendodin, otdelenie)

    else:
        bot.send_message(message.chat.id, 'Ошибка', reply_markup=markup)


def formy(message):
    if message.text == 'Очная':
        bot.send_message(message.chat.id, 'Специальности первого отделения:')
        bot.send_message(message.chat.id, pervoeotdel)
        bot.send_message(message.chat.id, 'Специальности второго отделения:')
        bot.send_message(message.chat.id, vtoroeotdel, reply_markup=markup2)
        sendform = bot.send_message(message.chat.id, 'Введите цифру специальности о которой хотите узнать:',
                                    reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(sendform, informforspec1)

    elif message.text == 'Заочное':
        bot.send_message(message.chat.id, 'Специальности заочного отделения:')
        sendform1 = bot.send_message(message.chat.id, zaochnaya, reply_markup=markup2)
        bot.register_next_step_handler(sendform1, spec2)

    elif message.text == 'Переподготовка/Повышение квалификации':
        bot.send_message(message.chat.id, 'Специальности Переподготовки/Повышения квалификации')
        bot.send_message(message.chat.id, perepodgotovka, reply_markup=markup)

    elif message.text == 'Вернуться назад':
        sendform2 = bot.send_message(message.chat.id, 'Вы вернулись назад.', reply_markup=markup1)
        bot.register_next_step_handler(sendform2, otdelenie)

    else:
        bot.send_message(message.chat.id, 'Вы вернулись в начало', reply_markup=markup)


def spec1(message):
    if message.text == 'Вернуться к началу':
        bot.send_message(message.chat.id, 'Вы вернулись в начало', reply_markup=markup)

    elif message.text == 'Узнать больше о специальностях':
        sendspec = bot.send_message(message.chat.id, 'Введите цифру специальности, о которой хотите узнать')
        bot.register_next_step_handler(sendspec, informforspec1)

    else:
        bot.send_message(message.chat.id, 'Вы вернулись в начало', reply_markup=markup)


def spec2(message):
    if message.text == 'Вернуться к началу':
        bot.send_message(message.chat.id, 'Вы вернулись в начало', reply_markup=markup)

    elif message.text == 'Узнать больше о специальностях':
        sendspec2 = bot.send_message(message.chat.id, 'Введите цифру специальности, о которой хотите узнать')
        bot.register_next_step_handler(sendspec2, informforspec1)

    else:
        bot.send_message(message.chat.id, 'Вы вернулись в начало', reply_markup=markup)


def informforspec1(message):
    if message.text == '1':
        bot.send_message(message.chat.id,
                         'Профессия архитектора предполагает архитектурное проектирование на профессиональном уровне. В обязанности специалиста входят организация архитектурной среды, проектирование зданий и разработка объемно-планировочных и архитектурных решений. Архитектор – это специалист, занимающийся созданием проекта будущего архитектурного объекта.',
                         reply_markup=markup)
    elif message.text == '2':
        bot.send_message(message.chat.id,
                         'Инженер по водоснабжению и водоотведению занимается проектированием, ремонтом, монтажом оборудования, предназначенного для организации поступления и отвода воды в различных помещениях. Они выполняют разнообразные работы по очистке воды, а также контролируют качество различных показателей, ремонтируют системы отопления, канализации, горячего и холодного водоснабжения.',
                         reply_markup=markup)
    elif message.text == '3':
        bot.send_message(message.chat.id,
                         'Специалист в сфере гостиничного дела занимается своевременным оформлением заявок на размещение, бронированием номеров, ведением корреспонденции и предоставлением информации об услугах гостям отеля. Он демонстрирует клиентам цены и доступные категории номеров, взаимодействует со смежными отделами, организующими дополнительные услуги (например, банкеты) и работает с претензиями.',
                         reply_markup=markup)
    elif message.text == '4':
        bot.send_message(message.chat.id,
                         'Область профессиональной деятельности выпускников: реализация правовых норм в социальной сфере, выполнение государственных полномочий по пенсионному обеспечению, государственных и муниципальных полномочий по социальной защите населения. Обучение в Колледже по специальности  «Право и организация социального обеспечения» позволит освоить квалификацию «юрист».',
                         reply_markup=markup)
    elif message.text == '5':
        bot.send_message(message.chat.id,
                         'Специальность - Сварочное производство. Содержание труда: организация и введение технологических процессов сварочного производства: технологические процессы сварочного производства, сварочное оборудование и основные сварочные материалы, техническая и технологическая документация; организация и планирование сварочного производства: осуществлять текущее и перспективное планирование производственных работ, производить технологические расчёты.',
                         reply_markup=markup)
    elif message.text == '6':
        bot.send_message(message.chat.id,
                         'Информатика и вычислительная техника. Квалификация выпускника: Сетевой и системный администратор. Специалист по администрированию сети. Специалист, закончивший обучение данной специальности, занимается проектированием, созданием и модернизацией сетевой архитектуры.',
                         reply_markup=markup)
    elif message.text == '7':
        bot.send_message(message.chat.id,
                         'Общая инженерная подготовка в учебной программе занимает лидирующее место, однако прикладные дисциплины, в состав которых входят проектирование и организация строительства инженерных конструкций, технологические процессы возведения инженерных сооружений, — также существенная часть процесса профессиональной подготовки. Один из важнейших прикладных навыков, формируемых у студентов – умение рассчитывать сметную стоимость и проектировать инженерные конструкции. Специалисты с повышенным профилем подготовки на практике учатся рационально использовать автоматизированные методы возведения инженерных конструкций.',
                         reply_markup=markup)
    elif message.text == '8':
        bot.send_message(message.chat.id,
                         'Теплоснабжение и теплотехническое оборудование. Специалист по теплоснабжению и теплотехническому оборудованию занимается строительством, эксплуатацией, ремонтом, наладкой, контролем систем теплоснабжения, ликвидирует аварии систем тепло - и топливо снабжения, ведет техническую документацию. В рамках обучения студенты приобретают профессию «Оператор топливного пункта» с присвоением 3 разряда',
                         reply_markup=markup)
    elif message.text == '9':
        bot.send_message(message.chat.id,
                         '«Монтаж и эксплуатация оборудования и систем газоснабжения». Квалификация специалиста (выпускника): техник. Выпускник должен быть готов к организации и проведению работ по проектированию, строительству, реконструкции, техническому перевооружению, консервации и ликвидации, изготовлению, монтажу, наладке, обслуживанию и ремонту технических устройств, применяемых в системах газораспределения и газопотребления.',
                         reply_markup=markup)
    elif message.text == '10':
        bot.send_message(message.chat.id,
                         'Монтаж, наладка и эксплуатация электрооборудования промышленных и гражданских зданий – это специалисты, которые организуют монтаж, наладку, ремонт и эксплуатацию силового и осветительного электрооборудования электрических сетей промышленных и гражданских зданий',
                         reply_markup=markup)
    elif message.text == '11':
        bot.send_message(message.chat.id,
                         'Строительство и эксплуатация автомобильных дорог и аэродромов – специальность, которая включает в себя совокупность средств, способов и методов человеческой деятельности, направленных на решение комплексных задач, связанных с проектированием, строительством, эксплуатацией и реконструкцией автомобильных дорог, аэродромов и других объектов дорожного и аэродромного комплексов.Строительство дорог является одним из главных факторов развития региона.',
                         reply_markup=markup)
    elif message.text == '12':
        bot.send_message(message.chat.id,
                         'Строительство и эксплуатация городских путей сообщения. Специальность: Техник-строитель - это специалист, принимающий участие в полевых изыскательских работах при разбивке трассы будущей дороги, проектировании, строительстве и эксплуатации городских дорог. Может работать в дорожной службе, основными задачами которой являются: обеспечение безопасного движения, сохранность дорог от преждевременного износа.',
                         reply_markup=markup)
    elif message.text == '13':
        bot.send_message(message.chat.id,
                         'Строительство и эксплуатация зданий и сооружений – специальность, в процессе которой выпускнику будет необходимо заниматься производственной деятельностью в проектных, строительных, строительно-монтажных организациях любых форм собственности по строительству, эксплуатации и реконструкции жилых, общественных и промышленных объектов. В обязанности специалиста входит перечень работ, которые определяются областью его занятости.',
                         reply_markup=markup)
    elif message.text == '14':
        bot.send_message(message.chat.id,
                         'Управление, эксплуатация и обслуживание многоквартирного дома. Специалист по управлению, эксплуатации и обслуживанию многоквартирного дома занимается организацией и проведением работ по обеспечению сохранности общего имущества многоквартирного дома, комфортных и безопасных условий проживания жильцов, решают вопросы пользования этим имуществом, обеспечивают предоставление коммунальных услуг жильцам дома.',
                         reply_markup=markup)
    elif message.text == '15':
        bot.send_message(message.chat.id,
                         'Профессия Специалист по электроснабжению. Специалист по электроснабжению занимается организацией технического обслуживания, наладки, эксплуатации, ремонтов оборудования электрических подстанций и сетей электроснабжения.',
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, 'Ошибка! Вы вернулись в начало', reply_markup=markup)


def informforspec2(message):
    if message.text == '1':
        bot.send_message(message.chat.id,
                         'Инженер по водоснабжению и водоотведению занимается проектированием, ремонтом, монтажом оборудования, предназначенного для организации поступления и отвода воды в различных помещениях. Они выполняют разнообразные работы по очистке воды, а также контролируют качество различных показателей, ремонтируют системы отопления, канализации, горячего и холодного водоснабжения.',
                         reply_markup=markup)
    elif message.text == '2':
        bot.send_message(message.chat.id,
                         'Монтаж и эксплуатация оборудования и систем газоснабжения. Квалификация специалиста (выпускника): техник. Выпускник должен быть готов к организации и проведению работ по проектированию, строительству, реконструкции, техническому перевооружению, консервации и ликвидации, изготовлению, монтажу, наладке, обслуживанию и ремонту технических устройств, применяемых в системах газораспределения и газопотребления.',
                         reply_markup=markup)
    elif message.text == '3':
        bot.send_message(message.chat.id,
                         'Монтаж, наладка и эксплуатация электрооборудования промышленных и гражданских зданий – это специалисты, которые организуют монтаж, наладку, ремонт и эксплуатацию силового и осветительного электрооборудования электрических сетей промышленных и гражданских зданий',
                         reply_markup=markup)
    elif message.text == '4':
        bot.send_message(message.chat.id,
                         'Область профессиональной деятельности выпускников: реализация правовых норм в социальной сфере, выполнение государственных полномочий по пенсионному обеспечению, государственных и муниципальных полномочий по социальной защите населения. Обучение в Колледже по специальности  «Право и организация социального обеспечения» позволит освоить квалификацию «юрист».',
                         reply_markup=markup)
    elif message.text == '5':
        bot.send_message(message.chat.id,
                         'Строительство и эксплуатация автомобильных дорог и аэродромов – специальность, которая включает в себя совокупность средств, способов и методов человеческой деятельности, направленных на решение комплексных задач, связанных с проектированием, строительством, эксплуатацией и реконструкцией автомобильных дорог, аэродромов и других объектов дорожного и аэродромного комплексов.Строительство дорог является одним из главных факторов развития региона.',
                         reply_markup=markup)
    elif message.text == '6':
        bot.send_message(message.chat.id,
                         'Строительство и эксплуатация городских путей сообщения. Специальность: Техник-строитель - это специалист, принимающий участие в полевых изыскательских работах при разбивке трассы будущей дороги, проектировании, строительстве и эксплуатации городских дорог. Может работать в дорожной службе, основными задачами которой являются: обеспечение безопасного движения, сохранность дорог от преждевременного износа.',
                         reply_markup=markup)
    elif message.text == '7':
        bot.send_message(message.chat.id,
                         'Строительство и эксплуатация зданий и сооружений – специальность, в процессе которой выпускнику будет необходимо заниматься производственной деятельностью в проектных, строительных, строительно-монтажных организациях любых форм собственности по строительству, эксплуатации и реконструкции жилых, общественных и промышленных объектов. В обязанности специалиста входит перечень работ, которые определяются областью его занятости.',
                         reply_markup=markup)
    elif message.text == '8':
        bot.send_message(message.chat.id,
                         'Общая инженерная подготовка в учебной программе занимает лидирующее место, однако прикладные дисциплины, в состав которых входят проектирование и организация строительства инженерных конструкций, технологические процессы возведения инженерных сооружений, — также существенная часть процесса профессиональной подготовки. Один из важнейших прикладных навыков, формируемых у студентов – умение рассчитывать сметную стоимость и проектировать инженерные конструкции. Специалисты с повышенным профилем подготовки на практике учатся рационально использовать автоматизированные методы возведения инженерных конструкций.',
                         reply_markup=markup)
    elif message.text == '9':
        bot.send_message(message.chat.id,
                         'Теплоснабжение и теплотехническое оборудование. Специалист по теплоснабжению и теплотехническому оборудованию занимается строительством, эксплуатацией, ремонтом, наладкой, контролем систем теплоснабжения, ликвидирует аварии систем тепло - и топливо снабжения, ведет техническую документацию. В рамках обучения студенты приобретают профессию «Оператор топливного пункта» с присвоением 3 разряда',
                         reply_markup=markup)
    elif message.text == '10':
        bot.send_message(message.chat.id,
                         'Выпускник по специальности «Компьютерные системы и комплексы» проектируют цифровые устройства, устанавливают и настраивают периферийное оборудование, осуществляют техническое обслуживание и ремонт компьютерных систем и комплексов, выполняют работы по одной или нескольким профессиям рабочих, должностям служащих, разрабатывают компьютерные системы и комплексы.',
                         reply_markup=markup)
    elif message.text == '11':
        bot.send_message(message.chat.id,
                         'Профессия Специалист по электроснабжению. Специалист по электроснабжению занимается организацией технического обслуживания, наладки, эксплуатации, ремонтов оборудования электрических подстанций и сетей электроснабжения.',
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, 'Ошибка! Вы вернулись в начало', reply_markup=markup)


####################################################ТЕСТ#############################################################
def uppdute(name, no1, no2, no3, no4, no5, no6, no7, no8, no9, no10, no11, no12, no13, no14, no15, messageChatId):
    with sqlite3.connect('.\\testBotbd.db') as db:
        cur = db.cursor()
        cur.execute("SELECT ca, ct, cv, vc, te, ar, yp, uc, gd, sc, cs, ms, cp, cd, mg\
         FROM testBotbd WHERE user_id = ?", (messageChatId,))
        check11 = cur.fetchall()
        newcheck = check11[0]
        cur.execute("UPDATE testBotbd SET ca=?, ct=?, cv=?, vc=?, te=?, ar=?, yp=?, uc=?, gd=?, sc=?, cs=?, ms=?, cp=?, cd=?, mg=?\
         WHERE user_id = ?",
                    (no1 + newcheck[0], no2 + newcheck[1], no3 + newcheck[2], no4 + newcheck[3], no5 + newcheck[4],
                     no6 + newcheck[5], no7 + newcheck[6], no8 + newcheck[7], no9 + newcheck[8], no10 + newcheck[9],
                     no11 + newcheck[10], no12 + newcheck[11], no13 + newcheck[12], no14 + newcheck[13],
                     no15 + newcheck[14], messageChatId,))
        db.commit()


def testing1_1(message):
    messageChatId = int(message.chat.id)

    if message.text == 'Математика':
        uppdute("Математика", 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, messageChatId)
        sendtest = bot.send_message(message.chat.id, \
                                    'Выбрано один из трех\nКакие предметы в школе вам давались легче всего?',
                                    reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest, testing1_2)

    elif message.text == 'Информатика':
        uppdute("Информатика", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest1 = bot.send_message(message.chat.id, \
                                     'Выбрано один из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest1, testing1_2)

    elif message.text == 'Физика':
        uppdute("Физика", 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, messageChatId)
        sendtest2 = bot.send_message(message.chat.id, \
                                     'Выбрано один из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest2, testing1_2)

    elif message.text == 'Обществознание':
        uppdute("Обществознание", 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest3 = bot.send_message(message.chat.id, \
                                     'Выбрано один из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest3, testing1_2)

    elif message.text == 'История':
        uppdute("История", 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest4 = bot.send_message(message.chat.id, \
                                     'Выбрано один из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest4, testing1_2)

    elif message.text == 'Литература':
        uppdute("Литература", 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest5 = bot.send_message(message.chat.id, \
                                     'Выбрано один из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest5, testing1_2)

    elif message.text == 'Английский язык':
        uppdute("Английский язык", 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest6 = bot.send_message(message.chat.id, \
                                     'Выбрано один из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest6, testing1_2)

    elif message.text == 'Технология':
        uppdute("Технология", 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, messageChatId)
        sendtest7 = bot.send_message(message.chat.id, \
                                     'Выбрано один из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest7, testing1_2)

    elif message.text == 'Черчение':
        uppdute("Черчение", 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest8 = bot.send_message(message.chat.id, \
                                     'Выбрано один из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest8, testing1_2)

    elif message.text == 'Русский язык':
        uppdute("Русский язык", 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest9 = bot.send_message(message.chat.id, \
                                     'Выбрано один из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest9, testing1_2)

    elif message.text == 'Вернуться назад':
        sendtest10 = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(sendtest10, otdelenie)
    else:
        sendtest11 = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(sendtest11, testing1_1)


def testing1_2(message):
    messageChatId = int(message.chat.id)

    if message.text == 'Математика':
        uppdute("Математика", 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, messageChatId)
        sendtest = bot.send_message(message.chat.id, \
                                    'Выбрано два из трех\nКакие предметы в школе вам давались легче всего?',
                                    reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest, testing1_3)

    elif message.text == 'Информатика':
        uppdute("Информатика", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest1 = bot.send_message(message.chat.id, \
                                     'Выбрано два из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest1, testing1_3)

    elif message.text == 'Физика':
        uppdute("Физика", 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, messageChatId)
        sendtest2 = bot.send_message(message.chat.id, \
                                     'Выбрано два из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest2, testing1_3)

    elif message.text == 'Обществознание':
        uppdute("Обществознание", 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest3 = bot.send_message(message.chat.id, \
                                     'Выбрано два из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest3, testing1_3)

    elif message.text == 'История':
        uppdute("История", 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest4 = bot.send_message(message.chat.id, \
                                     'Выбрано два из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest4, testing1_3)

    elif message.text == 'Литература':
        uppdute("Литература", 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest5 = bot.send_message(message.chat.id, \
                                     'Выбрано два из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest5, testing1_3)

    elif message.text == 'Английский язык':
        uppdute("Английский язык", 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest6 = bot.send_message(message.chat.id, \
                                     'Выбрано два из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest6, testing1_3)

    elif message.text == 'Технология':
        uppdute("Технология", 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, messageChatId)
        sendtest7 = bot.send_message(message.chat.id, \
                                     'Выбрано два из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest7, testing1_3)

    elif message.text == 'Черчение':
        uppdute("Черчение", 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest8 = bot.send_message(message.chat.id, \
                                     'Выбрано два из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest8, testing1_3)

    elif message.text == 'Русский язык':
        uppdute("Русский язык", 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest9 = bot.send_message(message.chat.id, \
                                     'Выбрано два из трех\nКакие предметы в школе вам давались легче всего?',
                                     reply_markup=firstquetion)
        bot.register_next_step_handler(sendtest9, testing1_3)

    elif message.text == 'Вернуться назад':
        sendtest10 = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(sendtest10, otdelenie)
    else:
        sendtest11 = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(sendtest11, testing1_2)


def testing1_3(message):
    messageChatId = int(message.chat.id)

    if message.text == 'Математика':
        uppdute("Математика", 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, messageChatId)
        sendtest = bot.send_message(message.chat.id, \
                                    'Выбрано три из трех\nВ каких условиях вы хотели бы работать?',
                                    reply_markup=ysloviajob)
        bot.register_next_step_handler(sendtest, testing2_1)

    elif message.text == 'Информатика':
        uppdute("Информатика", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest1 = bot.send_message(message.chat.id, \
                                     'Выбрано три из трех\nВ каких условиях вы хотели бы работать?',
                                     reply_markup=ysloviajob)
        bot.register_next_step_handler(sendtest1, testing2_1)

    elif message.text == 'Физика':
        uppdute("Физика", 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, messageChatId)
        sendtest2 = bot.send_message(message.chat.id, \
                                     'Выбрано три из трех\nВ каких условиях вы хотели бы работать?',
                                     reply_markup=ysloviajob)
        bot.register_next_step_handler(sendtest2, testing2_1)

    elif message.text == 'Обществознание':
        uppdute("Обществознание", 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest3 = bot.send_message(message.chat.id, \
                                     'Выбрано три из трех\nВ каких условиях вы хотели бы работать?',
                                     reply_markup=ysloviajob)
        bot.register_next_step_handler(sendtest3, testing2_1)

    elif message.text == 'История':
        uppdute("История", 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest4 = bot.send_message(message.chat.id, \
                                     'Выбрано три из трех\nВ каких условиях вы хотели бы работать?',
                                     reply_markup=ysloviajob)
        bot.register_next_step_handler(sendtest4, testing2_1)

    elif message.text == 'Литература':
        uppdute("Литература", 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest5 = bot.send_message(message.chat.id, \
                                     'Выбрано три из трех\nВ каких условиях вы хотели бы работать?',
                                     reply_markup=ysloviajob)
        bot.register_next_step_handler(sendtest5, testing2_1)

    elif message.text == 'Английский язык':
        uppdute("Английский язык", 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest6 = bot.send_message(message.chat.id, \
                                     'Выбрано три из трех\nВ каких условиях вы хотели бы работать?',
                                     reply_markup=ysloviajob)
        bot.register_next_step_handler(sendtest6, testing2_1)

    elif message.text == 'Технология':
        uppdute("Технология", 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, messageChatId)
        sendtest7 = bot.send_message(message.chat.id, \
                                     'Выбрано три из трех\nВ каких условиях вы хотели бы работать?',
                                     reply_markup=ysloviajob)
        bot.register_next_step_handler(sendtest7, testing2_1)

    elif message.text == 'Черчение':
        uppdute("Черчение", 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest8 = bot.send_message(message.chat.id, \
                                     'Выбрано три из трех\nВ каких условиях вы хотели бы работать?',
                                     reply_markup=ysloviajob)
        bot.register_next_step_handler(sendtest8, testing2_1)

    elif message.text == 'Русский язык':
        uppdute("Русский язык", 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        sendtest9 = bot.send_message(message.chat.id, \
                                     'Выбрано три из трех\nВ каких условиях вы хотели бы работать?',
                                     reply_markup=ysloviajob)
        bot.register_next_step_handler(sendtest9, testing2_1)

    elif message.text == 'Вернуться назад':
        sendtest10 = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(sendtest10, otdelenie)
    else:
        sendtest11 = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(sendtest11, testing1_3)


def testing2_1(message):
    messageChatId = int(message.chat.id)

    if message.text == "Работать с клиентами":
        uppdute("Работать с клиентами", 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nВ каких условиях вы хотели бы работать?',
                                reply_markup=ysloviajob)
        bot.register_next_step_handler(send, testing2_2)

    elif message.text == 'Работать на открытом воздухе':
        uppdute('Работать на открытом воздухе', 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nВ каких условиях вы хотели бы работать?',
                                reply_markup=ysloviajob)
        bot.register_next_step_handler(send, testing2_2)

    elif message.text == 'Работать одному':
        uppdute('Работать одному', 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nВ каких условиях вы хотели бы работать?',
                                reply_markup=ysloviajob)
        bot.register_next_step_handler(send, testing2_2)

    elif message.text == 'Работать с высокотехнологичным оборудованием':
        uppdute('Работать с высокотехнологичным оборудованием', 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
                messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nВ каких условиях вы хотели бы работать?',
                                reply_markup=ysloviajob)
        bot.register_next_step_handler(send, testing2_2)

    elif message.text == 'Работать в команде':
        uppdute('Работать в команде', 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nВ каких условиях вы хотели бы работать?',
                                reply_markup=ysloviajob)
        bot.register_next_step_handler(send, testing2_2)

    elif message.text == 'Работать в помещении':
        uppdute('Работать в помещении', 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nВ каких условиях вы хотели бы работать?',
                                reply_markup=ysloviajob)
        bot.register_next_step_handler(send, testing2_2)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing2_1)


def testing2_2(message):
    messageChatId = int(message.chat.id)

    if message.text == "Работать с клиентами":
        uppdute("Работать с клиентами", 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)
        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_1)

    elif message.text == 'Работать на открытом воздухе':
        uppdute('Работать на открытом воздухе', 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_1)

    elif message.text == 'Работать одному':
        uppdute('Работать одному', 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_1)

    elif message.text == 'Работать с высокотехнологичным оборудованием':
        uppdute('Работать с высокотехнологичным оборудованием', 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
                messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_1)

    elif message.text == 'Работать в команде':
        uppdute('Работать в команде', 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_1)

    elif message.text == 'Работать в помещении':
        uppdute('Работать в помещении', 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_1)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing2_2)


def testing3_1(message):
    messageChatId = int(message.chat.id)

    if message.text == "Усидчивость":
        uppdute('Усидчивость', 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано одно из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_2)

    elif message.text == 'Коммуникабельность':
        uppdute('Коммуникабельность', 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано одно из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_2)

    elif message.text == 'Любознательность':
        uppdute('Любознательность', 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано одно из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_2)

    elif message.text == 'Энергичность':
        uppdute('Энергичность', 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано одно из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_2)

    elif message.text == 'Выносливость':
        uppdute('Выносливость', 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано одно из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_2)

    elif message.text == 'Мобильность':
        uppdute('Мобильность', 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано одно из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_2)

    elif message.text == 'Сосредоточенность':
        uppdute('Сосредоточенность', 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано одно из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_2)

    elif message.text == 'Стрессоустойчивость':
        uppdute('Стрессоустойчивость', 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано одно из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_2)

    elif message.text == 'Аккуратность':
        uppdute('Аккуратность', 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано одно из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_2)

    elif message.text == 'Внимательность':
        uppdute('Внимательность', 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано одно из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_2)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing3_1)


def testing3_2(message):
    messageChatId = int(message.chat.id)

    if message.text == "Усидчивость":
        uppdute('Усидчивость', 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_3)

    elif message.text == 'Коммуникабельность':
        uppdute('Коммуникабельность', 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_3)

    elif message.text == 'Любознательность':
        uppdute('Любознательность', 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_3)

    elif message.text == 'Энергичность':
        uppdute('Энергичность', 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_3)

    elif message.text == 'Выносливость':
        uppdute('Выносливость', 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_3)

    elif message.text == 'Мобильность':
        uppdute('Мобильность', 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_3)

    elif message.text == 'Сосредоточенность':
        uppdute('Сосредоточенность', 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_3)

    elif message.text == 'Стрессоустойчивость':
        uppdute('Стрессоустойчивость', 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_3)

    elif message.text == 'Аккуратность':
        uppdute('Аккуратность', 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_3)

    elif message.text == 'Внимательность':
        uppdute('Внимательность', 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из трех\nКакими личными качествами вы обладаете?', reply_markup=personal)
        bot.register_next_step_handler(send, testing3_3)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing3_2)


def testing3_3(message):
    messageChatId = int(message.chat.id)

    if message.text == "Усидчивость":
        uppdute('Усидчивость', 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано три из трех\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_1)

    elif message.text == 'Коммуникабельность':
        uppdute('Коммуникабельность', 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано три из трех\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_1)

    elif message.text == 'Любознательность':
        uppdute('Любознательность', 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано три из трех\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_1)

    elif message.text == 'Энергичность':
        uppdute('Энергичность', 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано три из трех\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_1)

    elif message.text == 'Выносливость':
        uppdute('Выносливость', 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано три из трех\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_1)

    elif message.text == 'Мобильность':
        uppdute('Мобильность', 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано три из трех\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_1)

    elif message.text == 'Сосредоточенность':
        uppdute('Сосредоточенность', 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано три из трех\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_1)

    elif message.text == 'Стрессоустойчивость':
        uppdute('Стрессоустойчивость', 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано три из трех\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_1)

    elif message.text == 'Аккуратность':
        uppdute('Аккуратность', 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано три из трех\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_1)

    elif message.text == 'Внимательность':
        uppdute('Внимательность', 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано три из трех\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_1)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing3_3)


def testing4_1(message):
    messageChatId = int(message.chat.id)

    if message.text == "Саморазвитие":
        uppdute('Саморазвитие', 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_2)

    elif message.text == 'Комфорт и безопасность':
        uppdute('Комфорт и безопасность', 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_2)

    elif message.text == 'Творчество':
        uppdute('Творчество', 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_2)

    elif message.text == 'Помощь людям':
        uppdute('Помощь людям', 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_2)

    elif message.text == 'Свобода и независимость':
        uppdute('Свобода и независимость', 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано один из двух\nКакие ваши цели и ценности?', reply_markup=prestige)
        bot.register_next_step_handler(send, testing4_2)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing4_1)


def testing4_2(message):
    messageChatId = int(message.chat.id)

    if message.text == "Саморазвитие":
        uppdute('Саморазвитие', 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nЧто у вас получается лучше всего?', reply_markup=likejob)
        bot.register_next_step_handler(send, testing5_1)

    elif message.text == 'Комфорт и безопасность':
        uppdute('Комфорт и безопасность', 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nЧто у вас получается лучше всего?', reply_markup=likejob)
        bot.register_next_step_handler(send, testing5_1)

    elif message.text == 'Творчество':
        uppdute('Творчество', 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nЧто у вас получается лучше всего?', reply_markup=likejob)
        bot.register_next_step_handler(send, testing5_1)

    elif message.text == 'Помощь людям':
        uppdute('Помощь людям', 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nЧто у вас получается лучше всего?', reply_markup=likejob)
        bot.register_next_step_handler(send, testing5_1)

    elif message.text == 'Свобода и независимость':
        uppdute('Свобода и независимость', 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'Выбрано два из двух\nЧто у вас получается лучше всего?', reply_markup=likejob)
        bot.register_next_step_handler(send, testing5_1)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing4_2)


def testing5_1(message):
    messageChatId = int(message.chat.id)

    if message.text == "Чинить и настраивать компьютер":
        uppdute('Чинить и настраивать компьютер', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'В детстве вы чаще всего…', reply_markup=chaildback)
        bot.register_next_step_handler(send, testing6_1)

    elif message.text == "Ремонтировать и устанавливать электрические розетки и приборы":
        uppdute('Ремонтировать и устанавливать электрические розетки и приборы', 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
                0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'В детстве вы чаще всего…', reply_markup=chaildback)
        bot.register_next_step_handler(send, testing6_1)

    elif message.text == "Заниматься творческой деятельностью, рукоделием":
        uppdute('Заниматься творческой деятельностью, рукоделием', 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                messageChatId)

        send = bot.send_message(message.chat.id, \
                                'В детстве вы чаще всего….', reply_markup=chaildback)
        bot.register_next_step_handler(send, testing6_1)

    elif message.text == "Находить новые знакомства, общаться, решать конфликтные ситуации":
        uppdute('Находить новые знакомства, общаться, решать конфликтные ситуации', 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
                0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'В детстве вы чаще всего…', reply_markup=chaildback)
        bot.register_next_step_handler(send, testing6_1)

    elif message.text == "Помогать с благоустройством приусадебного участка":
        uppdute('Помогать с благоустройством приусадебного участка', 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1,
                messageChatId)

        send = bot.send_message(message.chat.id, \
                                'В детстве вы чаще всего…', reply_markup=chaildback)
        bot.register_next_step_handler(send, testing6_1)

    elif message.text == "Помогать с ремонтом":
        uppdute('Помогать с ремонтом', 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, \
                                'В детстве вы чаще всего…', reply_markup=chaildback)
        bot.register_next_step_handler(send, testing6_1)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing5_1)


def testing6_1(message):
    messageChatId = int(message.chat.id)

    if message.text == "Играл(а) в компьютерные игры":
        uppdute('Играл(а) в компьютерные игры', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Какая выставка меня больше привлечёт', reply_markup=vistavka)
        bot.register_next_step_handler(send, testing7_1)

    elif message.text == "Играл(а) в конструктор":
        uppdute('Играл(а) в конструктор', 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, 'Какая выставка меня больше привлечёт', reply_markup=vistavka)
        bot.register_next_step_handler(send, testing7_1)

    elif message.text == "Гулял(а) с друзьями":
        uppdute('Гулял(а) с друзьями', 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Какая выставка меня больше привлечёт', reply_markup=vistavka)
        bot.register_next_step_handler(send, testing7_1)

    elif message.text == "Играл(а) в песочнице":
        uppdute('Играл(а) в песочнице', 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Какая выставка меня больше привлечёт', reply_markup=vistavka)
        bot.register_next_step_handler(send, testing7_1)

    elif message.text == "Играл(а) с железной дорогой, машинками":
        uppdute('Играл(а) с железной дорогой, машинками', 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, messageChatId)

        send = bot.send_message(message.chat.id, 'Какая выставка меня больше привлечёт', reply_markup=vistavka)
        bot.register_next_step_handler(send, testing7_1)

    elif message.text == "Играл(а) с куклами, в дочки-матери":
        uppdute('Играл(а) с куклами, в дочки-матери', 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Какая выставка меня больше привлечёт', reply_markup=vistavka)
        bot.register_next_step_handler(send, testing7_1)

    elif message.text == "Занимался(ась) творчеством":
        uppdute('Занимался(ась) творчеством', 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Какая выставка меня больше привлечёт', reply_markup=vistavka)
        bot.register_next_step_handler(send, testing7_1)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing6_1)


def testing7_1(message):
    messageChatId = int(message.chat.id)

    if message.text == "Научная выставка":
        uppdute('Научная выставка', 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Мне интереснее беседовать о:', reply_markup=besedio)
        bot.register_next_step_handler(send, testing8_1)

    elif message.text == "Выставка архитектуры":
        uppdute('Выставка архитектуры', 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Мне интереснее беседовать о:', reply_markup=besedio)
        bot.register_next_step_handler(send, testing8_1)

    elif message.text == "Ярмарка и выставка услуг":
        uppdute('Ярмарка и выставка услуг', 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Мне интереснее беседовать о:', reply_markup=besedio)
        bot.register_next_step_handler(send, testing8_1)

    elif message.text == "Выставка продукции производственного назначения":
        uppdute('Выставка продукции производственного назначения', 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
                messageChatId)

        send = bot.send_message(message.chat.id, 'Мне интереснее беседовать о:', reply_markup=besedio)
        bot.register_next_step_handler(send, testing8_1)

    elif message.text == "Выставка дорожного хозяйства, техники":
        uppdute('Выставка дорожного хозяйства, техники', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Мне интереснее беседовать о:', reply_markup=besedio)
        bot.register_next_step_handler(send, testing8_1)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing7_1)


def testing8_1(message):
    messageChatId = int(message.chat.id)

    if message.text == "Компьютерных вирусах, проблемах настройки компьютеров":
        uppdute('Компьютерных вирусах, проблемах настройки компьютеров', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                messageChatId)

        send = bot.send_message(message.chat.id, 'Подсчет ответов...', reply_markup=finaly)
        bot.register_next_step_handler(send, testing9_1)

    elif message.text == "Автомобилям и ситуациях на дорогах":
        uppdute('Автомобилям и ситуациях на дорогах', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Подсчет ответов...', reply_markup=finaly)
        bot.register_next_step_handler(send, testing9_1)

    elif message.text == "Туризме, достопримечательностях, путешествиях":
        uppdute('Туризме, достопримечательностях, путешествиях', 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                messageChatId)

        send = bot.send_message(message.chat.id, 'Подсчет ответов...', reply_markup=finaly)
        bot.register_next_step_handler(send, testing9_1)

    elif message.text == "Политике, законе":
        uppdute('Политике, законе', 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Подсчет ответов...', reply_markup=finaly)
        bot.register_next_step_handler(send, testing9_1)

    elif message.text == "Применении новых технологий в быту":
        uppdute('Применении новых технологий в быту', 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, messageChatId)

        send = bot.send_message(message.chat.id, 'Подсчет ответов...', reply_markup=finaly)
        bot.register_next_step_handler(send, testing9_1)

    elif message.text == "Развитии инфраструктуры города":
        uppdute('Развитии инфраструктуры города', 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, messageChatId)

        send = bot.send_message(message.chat.id, 'Подсчет ответов...', reply_markup=finaly)
        bot.register_next_step_handler(send, testing9_1)

    elif message.text == 'Вернуться назад':
        send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
        bot.register_next_step_handler(send, otdelenie)

    else:
        send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
        bot.register_next_step_handler(send, testing8_1)


def testing9_1(message):
    messageChatId = int(message.chat.id)
    listgroup = ["ca", "ct", "cv", "vc", "te", "ar", "yp", "uc", "gd", "sc", "cs", "ms", "cp", "cd", "mg"]

    with sqlite3.connect('.\\testBotbd.db') as db:
        cur = db.cursor()
        if message.text == "Узнать результаты":
            cur.execute("SELECT ca, ct, cv, vc, te, ar, yp, uc, gd, sc, cs, ms, cp, cd, mg\
             FROM testBotbd WHERE user_id = ?", (messageChatId,))
            check11 = cur.fetchall()
            db.commit()
            newcheck = check11[0]
            finalcheck = [index for index, val in enumerate(newcheck) if val == max(newcheck)]
            for i in finalcheck:
                if listgroup[i] == 'ca':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Системный администратор', reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'ct':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Строительство и эксплуатация зданий и сооружений',
                                            reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'cv':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Сварочное производство', reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'vc':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Водоснабжение и водоотведение',
                                            reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'te':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Теплоснабжение и теплотехническое оборудование',
                                            reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'ar':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Архитектура', reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'yp':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Управление, эксплуатация и обслуживание многоквартирного дома',
                                            reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'us':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Право и организация социального обеспечения',
                                            reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'gd':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Гостиничное дело', reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'sc':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Электроснабжение', reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'cs':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Строительство и эксплуатация зданий и сооружений',
                                            reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'ms':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Монтаж и эксплуатация оборудования систем газоснабжения',
                                            reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'cp':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Строительство и эксплуатация городских путей сообщения',
                                            reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'cd':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Строительство и эксплуатация автомобильных дорог и аэродромов',
                                            reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)
                elif listgroup[i] == 'mg':
                    send = bot.send_message(message.chat.id,
                                            'Вам подойдет специальность: Монтаж, наладка и эксплуатация электрооборудования промышленных и гражданских зданий',
                                            reply_markup=markup)
                    bot.register_next_step_handler(send, otdelenie)

        elif message.text == 'Вернуться назад':
            send = bot.send_message(message.chat.id, 'Вы вернулись назад', reply_markup=markup)
            bot.register_next_step_handler(send, otdelenie)

        else:
            send = bot.send_message(message.chat.id, 'Ошибка! Выберите ответ предложенный на кнопках ниже')
            bot.register_next_step_handler(send, testing9_1)


####################################################ТЕСТ#############################################################

async def startpoling():
    try:
        print("started")
        bot.polling(non_stop=True)
    except Exception as exept:
        print("!!!crashed!!!")
        print(exept)
        sleep(15)
    finally:
        print("stopped")
        bot.stop_polling()


if __name__ == "__main__":
    asyncio.run(startpoling())
